(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 9.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[     36526,        637]
NotebookOptionsPosition[     35235,        587]
NotebookOutlinePosition[     35583,        602]
CellTagsIndexPosition[     35540,        599]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"tupleRepeat", "[", 
    RowBox[{"string_String", ",", " ", "n_Integer"}], "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"n", "\[LessEqual]", "1"}], ",", " ", "string", ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Nest", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"StringJoin", "[", 
         RowBox[{
          RowBox[{"string", "<>", "\"\<, \>\""}], ",", "#"}], "]"}], "&"}], 
       ",", " ", "string", ",", " ", 
       RowBox[{"n", "-", "1"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.603450231291545*^9, 3.603450322095739*^9}, {
  3.6034503940388536`*^9, 3.603450436883304*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"tupleRepeat", "[", 
  RowBox[{"\"\<Any\>\"", ",", "4"}], "]"}]], "Input",
 CellChangeTimes->{{3.6034504210483985`*^9, 3.60345042876484*^9}}],

Cell[BoxData["\<\"Any, Any, Any, Any\"\>"], "Output",
 CellChangeTimes->{{3.6034504292648687`*^9, 3.603450437806357*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"tupleRepeat", "[", 
  RowBox[{"\"\<Any\>\"", ",", "1"}], "]"}]], "Input",
 CellChangeTimes->{{3.6034504210483985`*^9, 3.603450450733096*^9}}],

Cell[BoxData["\<\"Any\"\>"], "Output",
 CellChangeTimes->{3.6034504510381136`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"tupleArityize", "[", "n_Integer", "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"\"\<  implicit def enrichedTuple\>\"", "<>", 
   RowBox[{"ToString", "[", "n", "]"}], "<>", "\"\<( tuple: Tuple\>\"", "<>", 
   RowBox[{"ToString", "[", "n", "]"}], "<>", "\"\<[\>\"", "<>", 
   RowBox[{"tupleRepeat", "[", 
    RowBox[{"\"\<Any\>\"", ",", "n"}], "]"}], "<>", 
   "\"\<] ) =  new breeze.linalg.support.enrichedTuple.EnrichedTuple\>\"", "<>", 
   RowBox[{"ToString", "[", "n", "]"}], "<>", 
   "\"\<(tuple) \\n\>\""}]}]], "Input",
 CellChangeTimes->{{3.6034501191791325`*^9, 3.603450203946981*^9}, {
  3.603450446494854*^9, 3.6034505495337477`*^9}, {3.603450590750105*^9, 
  3.6034506757259655`*^9}, {3.603451446360043*^9, 3.603451458951763*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringJoin", "@@", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"tupleArityize", "[", "n", "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"n", ",", "1", ",", "22"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6034505543460226`*^9, 3.6034505766933007`*^9}, {
  3.603450615596526*^9, 3.603450617012607*^9}, {3.6034506574439197`*^9, 
  3.603450689843773*^9}, {3.603450728051958*^9, 3.603450742571789*^9}}],

Cell[BoxData["\<\"  implicit def tupleToDenseVectorBuilder1( tuple: \
Tuple1[Any] ) =  new \
breeze.linalg.support.tupleToDenseVectorBuilder.TupleToDenseVectorBuilder1(\
tuple) \\n  implicit def tupleToDenseVectorBuilder2( tuple: Tuple2[Any, Any] \
) =  new breeze.linalg.support.tupleToDenseVectorBuilder.\
TupleToDenseVectorBuilder2(tuple) \\n  implicit def \
tupleToDenseVectorBuilder3( tuple: Tuple3[Any, Any, Any] ) =  new \
breeze.linalg.support.tupleToDenseVectorBuilder.TupleToDenseVectorBuilder3(\
tuple) \\n  implicit def tupleToDenseVectorBuilder4( tuple: Tuple4[Any, Any, \
Any, Any] ) =  new \
breeze.linalg.support.tupleToDenseVectorBuilder.TupleToDenseVectorBuilder4(\
tuple) \\n  implicit def tupleToDenseVectorBuilder5( tuple: Tuple5[Any, Any, \
Any, Any, Any] ) =  new \
breeze.linalg.support.tupleToDenseVectorBuilder.TupleToDenseVectorBuilder5(\
tuple) \\n  implicit def tupleToDenseVectorBuilder6( tuple: Tuple6[Any, Any, \
Any, Any, Any, Any] ) =  new \
breeze.linalg.support.tupleToDenseVectorBuilder.TupleToDenseVectorBuilder6(\
tuple) \\n  implicit def tupleToDenseVectorBuilder7( tuple: Tuple7[Any, Any, \
Any, Any, Any, Any, Any] ) =  new \
breeze.linalg.support.tupleToDenseVectorBuilder.TupleToDenseVectorBuilder7(\
tuple) \\n  implicit def tupleToDenseVectorBuilder8( tuple: Tuple8[Any, Any, \
Any, Any, Any, Any, Any, Any] ) =  new \
breeze.linalg.support.tupleToDenseVectorBuilder.TupleToDenseVectorBuilder8(\
tuple) \\n  implicit def tupleToDenseVectorBuilder9( tuple: Tuple9[Any, Any, \
Any, Any, Any, Any, Any, Any, Any] ) =  new \
breeze.linalg.support.tupleToDenseVectorBuilder.TupleToDenseVectorBuilder9(\
tuple) \\n  implicit def tupleToDenseVectorBuilder10( tuple: Tuple10[Any, \
Any, Any, Any, Any, Any, Any, Any, Any, Any] ) =  new \
breeze.linalg.support.tupleToDenseVectorBuilder.TupleToDenseVectorBuilder10(\
tuple) \\n  implicit def tupleToDenseVectorBuilder11( tuple: Tuple11[Any, \
Any, Any, Any, Any, Any, Any, Any, Any, Any, Any] ) =  new \
breeze.linalg.support.tupleToDenseVectorBuilder.TupleToDenseVectorBuilder11(\
tuple) \\n  implicit def tupleToDenseVectorBuilder12( tuple: Tuple12[Any, \
Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any] ) =  new \
breeze.linalg.support.tupleToDenseVectorBuilder.TupleToDenseVectorBuilder12(\
tuple) \\n  implicit def tupleToDenseVectorBuilder13( tuple: Tuple13[Any, \
Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any] ) =  new \
breeze.linalg.support.tupleToDenseVectorBuilder.TupleToDenseVectorBuilder13(\
tuple) \\n  implicit def tupleToDenseVectorBuilder14( tuple: Tuple14[Any, \
Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any] ) =  new \
breeze.linalg.support.tupleToDenseVectorBuilder.TupleToDenseVectorBuilder14(\
tuple) \\n  implicit def tupleToDenseVectorBuilder15( tuple: Tuple15[Any, \
Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any] ) =  \
new breeze.linalg.support.tupleToDenseVectorBuilder.\
TupleToDenseVectorBuilder15(tuple) \\n  implicit def \
tupleToDenseVectorBuilder16( tuple: Tuple16[Any, Any, Any, Any, Any, Any, \
Any, Any, Any, Any, Any, Any, Any, Any, Any, Any] ) =  new \
breeze.linalg.support.tupleToDenseVectorBuilder.TupleToDenseVectorBuilder16(\
tuple) \\n  implicit def tupleToDenseVectorBuilder17( tuple: Tuple17[Any, \
Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, \
Any] ) =  new \
breeze.linalg.support.tupleToDenseVectorBuilder.TupleToDenseVectorBuilder17(\
tuple) \\n  implicit def tupleToDenseVectorBuilder18( tuple: Tuple18[Any, \
Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, \
Any, Any] ) =  new \
breeze.linalg.support.tupleToDenseVectorBuilder.TupleToDenseVectorBuilder18(\
tuple) \\n  implicit def tupleToDenseVectorBuilder19( tuple: Tuple19[Any, \
Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, \
Any, Any, Any] ) =  new \
breeze.linalg.support.tupleToDenseVectorBuilder.TupleToDenseVectorBuilder19(\
tuple) \\n  implicit def tupleToDenseVectorBuilder20( tuple: Tuple20[Any, \
Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, \
Any, Any, Any, Any] ) =  new \
breeze.linalg.support.tupleToDenseVectorBuilder.TupleToDenseVectorBuilder20(\
tuple) \\n  implicit def tupleToDenseVectorBuilder21( tuple: Tuple21[Any, \
Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, \
Any, Any, Any, Any, Any] ) =  new \
breeze.linalg.support.tupleToDenseVectorBuilder.TupleToDenseVectorBuilder21(\
tuple) \\n  implicit def tupleToDenseVectorBuilder22( tuple: Tuple22[Any, \
Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, \
Any, Any, Any, Any, Any, Any] ) =  new \
breeze.linalg.support.tupleToDenseVectorBuilder.TupleToDenseVectorBuilder22(\
tuple) \\n\"\>"], "Output",
 CellChangeTimes->{
  3.603450577290335*^9, {3.603450617310624*^9, 3.6034506905788145`*^9}, {
   3.603450730847118*^9, 3.603450742958811*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["case a: TupleN", "Section",
 CellChangeTimes->{{3.6034553627730494`*^9, 3.6034553796500144`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"tupleCaseArityize", "[", "n_Integer", "]"}], ":=", 
  RowBox[{"\"\<case a: Tuple\>\"", "<>", 
   RowBox[{"ToString", "[", "n", "]"}], "<>", "\"\<[\>\"", "<>", 
   RowBox[{"tupleRepeat", "[", 
    RowBox[{"\"\<Any\>\"", ",", "n"}], "]"}], "<>", "\"\<] => \>\"", "<>", 
   RowBox[{"ToString", "[", 
    RowBox[{"-", "n"}], "]"}], "<>", "\"\<\\n\>\""}]}]], "Input",
 CellChangeTimes->{{3.6034516634814615`*^9, 3.6034517360886145`*^9}, {
   3.6034517797671127`*^9, 3.6034517833993206`*^9}, 3.6034544360690446`*^9, {
   3.603455387461461*^9, 3.603455467540041*^9}, {3.603456408868882*^9, 
   3.603456420003519*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"temp3", "=", 
  RowBox[{"StringJoin", "@@", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"tupleCaseArityize", "[", "n", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"n", ",", "1", ",", "22"}], "}"}]}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.603455447114873*^9, 3.603455449643018*^9}}],

Cell[BoxData["\<\"case a: Tuple1[Any] => -1\\ncase a: Tuple2[Any, Any] => \
-2\\ncase a: Tuple3[Any, Any, Any] => -3\\ncase a: Tuple4[Any, Any, Any, Any] \
=> -4\\ncase a: Tuple5[Any, Any, Any, Any, Any] => -5\\ncase a: Tuple6[Any, \
Any, Any, Any, Any, Any] => -6\\ncase a: Tuple7[Any, Any, Any, Any, Any, Any, \
Any] => -7\\ncase a: Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] => \
-8\\ncase a: Tuple9[Any, Any, Any, Any, Any, Any, Any, Any, Any] => -9\\ncase \
a: Tuple10[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any] => -10\\ncase a: \
Tuple11[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any] => -11\\ncase \
a: Tuple12[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any] => -12\
\\ncase a: Tuple13[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, \
Any, Any] => -13\\ncase a: Tuple14[Any, Any, Any, Any, Any, Any, Any, Any, \
Any, Any, Any, Any, Any, Any] => -14\\ncase a: Tuple15[Any, Any, Any, Any, \
Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any] => -15\\ncase a: \
Tuple16[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, \
Any, Any] => -16\\ncase a: Tuple17[Any, Any, Any, Any, Any, Any, Any, Any, \
Any, Any, Any, Any, Any, Any, Any, Any, Any] => -17\\ncase a: Tuple18[Any, \
Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, \
Any, Any] => -18\\ncase a: Tuple19[Any, Any, Any, Any, Any, Any, Any, Any, \
Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any] => -19\\ncase a: \
Tuple20[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, \
Any, Any, Any, Any, Any, Any] => -20\\ncase a: Tuple21[Any, Any, Any, Any, \
Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, \
Any, Any] => -21\\ncase a: Tuple22[Any, Any, Any, Any, Any, Any, Any, Any, \
Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any] => \
-22\\n\"\>"], "Output",
 CellChangeTimes->{{3.603455450774082*^9, 3.6034554694591513`*^9}, 
   3.6034564210625796`*^9}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["case class EnrichedTupleN", "Section",
 CellChangeTimes->{{3.6034553627730494`*^9, 3.6034553661402416`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"tupleCaseClassArityize", "[", "n_Integer", "]"}], ":=", 
  RowBox[{"\"\<  case class EnrichedTuple\>\"", "<>", 
   RowBox[{"ToString", "[", "n", "]"}], "<>", "\"\<( tuple: Tuple\>\"", "<>", 
   RowBox[{"ToString", "[", "n", "]"}], "<>", "\"\<[\>\"", "<>", 
   RowBox[{"tupleRepeat", "[", 
    RowBox[{"\"\<Any\>\"", ",", "n"}], "]"}], "<>", 
   "\"\<] ) extends EnrichedTupleBase {\n    def v() = {\n      val temp = \
tuple.productIterator.map( valueCode(_) ).toArray\n      if(temp.forall( _ > \
0 )){\n        max( temp ) match {\n          case 1 => DenseVector( \
tuple.productIterator.map( anyToInt(_) ).toArray )\n          case 2 => \
DenseVector( tuple.productIterator.map( anyToLong(_) ).toArray )\n          \
case 3 => DenseVector( tuple.productIterator.map( anyToFloat(_) ).toArray )\n \
         case 4 => DenseVector( tuple.productIterator.map( anyToDouble(_) \
).toArray )\n          case 5 => DenseVector( tuple.productIterator.map( \
anyToComplex(_) ).toArray )\n        }\n      } else {\n        throw new \
IllegalArgumentException( \\\"Cannot interpret tuples as DenseVector when \
they contain values with classes other than Int/Long/Float/Double/Complex\\\" \
)\n      }\n    }\n  }\n\>\""}]}]], "Input",
 CellChangeTimes->{{3.6034516634814615`*^9, 3.6034517360886145`*^9}, {
   3.6034517797671127`*^9, 3.6034517833993206`*^9}, 3.6034544360690446`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"temp2", "=", 
  RowBox[{"StringJoin", "@@", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"tupleCaseClassArityize", "[", "n", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"n", ",", "1", ",", "22"}], "}"}]}], "]"}]}]}]], "Input",
 CellChangeTimes->{
  3.603451754284655*^9, {3.6034518855391626`*^9, 3.6034518874032693`*^9}}],

Cell[BoxData["\<\"  case class EnrichedTuple1( tuple: Tuple1[Any] ) extends \
EnrichedTupleBase {\\n    def v() = {\\n      val temp = \
tuple.productIterator.map( valueCode(_) )\\n      if(temp.forall( _ > 0 \
)){\\n        max( temp ) match {\\n          case 1 => DenseVector( \
tuple.productIterator.map( anyToInt(_) ).toArray )\\n          case 2 => \
DenseVector( tuple.productIterator.map( anyToLong(_) ).toArray )\\n          \
case 3 => DenseVector( tuple.productIterator.map( anyToFloat(_) ).toArray \
)\\n          case 4 => DenseVector( tuple.productIterator.map( \
anyToDouble(_) ).toArray )\\n          case 5 => DenseVector( \
tuple.productIterator.map( anyToComplex(_) ).toArray )\\n        }\\n      } \
else {\\n        throw new IllegalArgumentException( \\\"Cannot interpret \
tuples as DenseVector when they contain values with classes other than \
Int/Long/Float/Double/Complex\\\" )\\n      }\\n    }\\n  }\\n  case class \
EnrichedTuple2( tuple: Tuple2[Any, Any] ) extends EnrichedTupleBase {\\n    \
def v() = {\\n      val temp = tuple.productIterator.map( valueCode(_) )\\n   \
   if(temp.forall( _ > 0 )){\\n        max( temp ) match {\\n          case 1 \
=> DenseVector( tuple.productIterator.map( anyToInt(_) ).toArray )\\n         \
 case 2 => DenseVector( tuple.productIterator.map( anyToLong(_) ).toArray \
)\\n          case 3 => DenseVector( tuple.productIterator.map( anyToFloat(_) \
).toArray )\\n          case 4 => DenseVector( tuple.productIterator.map( \
anyToDouble(_) ).toArray )\\n          case 5 => DenseVector( \
tuple.productIterator.map( anyToComplex(_) ).toArray )\\n        }\\n      } \
else {\\n        throw new IllegalArgumentException( \\\"Cannot interpret \
tuples as DenseVector when they contain values with classes other than \
Int/Long/Float/Double/Complex\\\" )\\n      }\\n    }\\n  }\\n  case class \
EnrichedTuple3( tuple: Tuple3[Any, Any, Any] ) extends EnrichedTupleBase {\\n \
   def v() = {\\n      val temp = tuple.productIterator.map( valueCode(_) \
)\\n      if(temp.forall( _ > 0 )){\\n        max( temp ) match {\\n          \
case 1 => DenseVector( tuple.productIterator.map( anyToInt(_) ).toArray )\\n  \
        case 2 => DenseVector( tuple.productIterator.map( anyToLong(_) \
).toArray )\\n          case 3 => DenseVector( tuple.productIterator.map( \
anyToFloat(_) ).toArray )\\n          case 4 => DenseVector( \
tuple.productIterator.map( anyToDouble(_) ).toArray )\\n          case 5 => \
DenseVector( tuple.productIterator.map( anyToComplex(_) ).toArray )\\n        \
}\\n      } else {\\n        throw new IllegalArgumentException( \\\"Cannot \
interpret tuples as DenseVector when they contain values with classes other \
than Int/Long/Float/Double/Complex\\\" )\\n      }\\n    }\\n  }\\n  case \
class EnrichedTuple4( tuple: Tuple4[Any, Any, Any, Any] ) extends \
EnrichedTupleBase {\\n    def v() = {\\n      val temp = \
tuple.productIterator.map( valueCode(_) )\\n      if(temp.forall( _ > 0 \
)){\\n        max( temp ) match {\\n          case 1 => DenseVector( \
tuple.productIterator.map( anyToInt(_) ).toArray )\\n          case 2 => \
DenseVector( tuple.productIterator.map( anyToLong(_) ).toArray )\\n          \
case 3 => DenseVector( tuple.productIterator.map( anyToFloat(_) ).toArray \
)\\n          case 4 => DenseVector( tuple.productIterator.map( \
anyToDouble(_) ).toArray )\\n          case 5 => DenseVector( \
tuple.productIterator.map( anyToComplex(_) ).toArray )\\n        }\\n      } \
else {\\n        throw new IllegalArgumentException( \\\"Cannot interpret \
tuples as DenseVector when they contain values with classes other than \
Int/Long/Float/Double/Complex\\\" )\\n      }\\n    }\\n  }\\n  case class \
EnrichedTuple5( tuple: Tuple5[Any, Any, Any, Any, Any] ) extends \
EnrichedTupleBase {\\n    def v() = {\\n      val temp = \
tuple.productIterator.map( valueCode(_) )\\n      if(temp.forall( _ > 0 \
)){\\n        max( temp ) match {\\n          case 1 => DenseVector( \
tuple.productIterator.map( anyToInt(_) ).toArray )\\n          case 2 => \
DenseVector( tuple.productIterator.map( anyToLong(_) ).toArray )\\n          \
case 3 => DenseVector( tuple.productIterator.map( anyToFloat(_) ).toArray \
)\\n          case 4 => DenseVector( tuple.productIterator.map( \
anyToDouble(_) ).toArray )\\n          case 5 => DenseVector( \
tuple.productIterator.map( anyToComplex(_) ).toArray )\\n        }\\n      } \
else {\\n        throw new IllegalArgumentException( \\\"Cannot interpret \
tuples as DenseVector when they contain values with classes other than \
Int/Long/Float/Double/Complex\\\" )\\n      }\\n    }\\n  }\\n  case class \
EnrichedTuple6( tuple: Tuple6[Any, Any, Any, Any, Any, Any] ) extends \
EnrichedTupleBase {\\n    def v() = {\\n      val temp = \
tuple.productIterator.map( valueCode(_) )\\n      if(temp.forall( _ > 0 \
)){\\n        max( temp ) match {\\n          case 1 => DenseVector( \
tuple.productIterator.map( anyToInt(_) ).toArray )\\n          case 2 => \
DenseVector( tuple.productIterator.map( anyToLong(_) ).toArray )\\n          \
case 3 => DenseVector( tuple.productIterator.map( anyToFloat(_) ).toArray \
)\\n          case 4 => DenseVector( tuple.productIterator.map( \
anyToDouble(_) ).toArray )\\n          case 5 => DenseVector( \
tuple.productIterator.map( anyToComplex(_) ).toArray )\\n        }\\n      } \
else {\\n        throw new IllegalArgumentException( \\\"Cannot interpret \
tuples as DenseVector when they contain values with classes other than \
Int/Long/Float/Double/Complex\\\" )\\n      }\\n    }\\n  }\\n  case class \
EnrichedTuple7( tuple: Tuple7[Any, Any, Any, Any, Any, Any, Any] ) extends \
EnrichedTupleBase {\\n    def v() = {\\n      val temp = \
tuple.productIterator.map( valueCode(_) )\\n      if(temp.forall( _ > 0 \
)){\\n        max( temp ) match {\\n          case 1 => DenseVector( \
tuple.productIterator.map( anyToInt(_) ).toArray )\\n          case 2 => \
DenseVector( tuple.productIterator.map( anyToLong(_) ).toArray )\\n          \
case 3 => DenseVector( tuple.productIterator.map( anyToFloat(_) ).toArray \
)\\n          case 4 => DenseVector( tuple.productIterator.map( \
anyToDouble(_) ).toArray )\\n          case 5 => DenseVector( \
tuple.productIterator.map( anyToComplex(_) ).toArray )\\n        }\\n      } \
else {\\n        throw new IllegalArgumentException( \\\"Cannot interpret \
tuples as DenseVector when they contain values with classes other than \
Int/Long/Float/Double/Complex\\\" )\\n      }\\n    }\\n  }\\n  case class \
EnrichedTuple8( tuple: Tuple8[Any, Any, Any, Any, Any, Any, Any, Any] ) \
extends EnrichedTupleBase {\\n    def v() = {\\n      val temp = \
tuple.productIterator.map( valueCode(_) )\\n      if(temp.forall( _ > 0 \
)){\\n        max( temp ) match {\\n          case 1 => DenseVector( \
tuple.productIterator.map( anyToInt(_) ).toArray )\\n          case 2 => \
DenseVector( tuple.productIterator.map( anyToLong(_) ).toArray )\\n          \
case 3 => DenseVector( tuple.productIterator.map( anyToFloat(_) ).toArray \
)\\n          case 4 => DenseVector( tuple.productIterator.map( \
anyToDouble(_) ).toArray )\\n          case 5 => DenseVector( \
tuple.productIterator.map( anyToComplex(_) ).toArray )\\n        }\\n      } \
else {\\n        throw new IllegalArgumentException( \\\"Cannot interpret \
tuples as DenseVector when they contain values with classes other than \
Int/Long/Float/Double/Complex\\\" )\\n      }\\n    }\\n  }\\n  case class \
EnrichedTuple9( tuple: Tuple9[Any, Any, Any, Any, Any, Any, Any, Any, Any] ) \
extends EnrichedTupleBase {\\n    def v() = {\\n      val temp = \
tuple.productIterator.map( valueCode(_) )\\n      if(temp.forall( _ > 0 \
)){\\n        max( temp ) match {\\n          case 1 => DenseVector( \
tuple.productIterator.map( anyToInt(_) ).toArray )\\n          case 2 => \
DenseVector( tuple.productIterator.map( anyToLong(_) ).toArray )\\n          \
case 3 => DenseVector( tuple.productIterator.map( anyToFloat(_) ).toArray \
)\\n          case 4 => DenseVector( tuple.productIterator.map( \
anyToDouble(_) ).toArray )\\n          case 5 => DenseVector( \
tuple.productIterator.map( anyToComplex(_) ).toArray )\\n        }\\n      } \
else {\\n        throw new IllegalArgumentException( \\\"Cannot interpret \
tuples as DenseVector when they contain values with classes other than \
Int/Long/Float/Double/Complex\\\" )\\n      }\\n    }\\n  }\\n  case class \
EnrichedTuple10( tuple: Tuple10[Any, Any, Any, Any, Any, Any, Any, Any, Any, \
Any] ) extends EnrichedTupleBase {\\n    def v() = {\\n      val temp = \
tuple.productIterator.map( valueCode(_) )\\n      if(temp.forall( _ > 0 \
)){\\n        max( temp ) match {\\n          case 1 => DenseVector( \
tuple.productIterator.map( anyToInt(_) ).toArray )\\n          case 2 => \
DenseVector( tuple.productIterator.map( anyToLong(_) ).toArray )\\n          \
case 3 => DenseVector( tuple.productIterator.map( anyToFloat(_) ).toArray \
)\\n          case 4 => DenseVector( tuple.productIterator.map( \
anyToDouble(_) ).toArray )\\n          case 5 => DenseVector( \
tuple.productIterator.map( anyToComplex(_) ).toArray )\\n        }\\n      } \
else {\\n        throw new IllegalArgumentException( \\\"Cannot interpret \
tuples as DenseVector when they contain values with classes other than \
Int/Long/Float/Double/Complex\\\" )\\n      }\\n    }\\n  }\\n  case class \
EnrichedTuple11( tuple: Tuple11[Any, Any, Any, Any, Any, Any, Any, Any, Any, \
Any, Any] ) extends EnrichedTupleBase {\\n    def v() = {\\n      val temp = \
tuple.productIterator.map( valueCode(_) )\\n      if(temp.forall( _ > 0 \
)){\\n        max( temp ) match {\\n          case 1 => DenseVector( \
tuple.productIterator.map( anyToInt(_) ).toArray )\\n          case 2 => \
DenseVector( tuple.productIterator.map( anyToLong(_) ).toArray )\\n          \
case 3 => DenseVector( tuple.productIterator.map( anyToFloat(_) ).toArray \
)\\n          case 4 => DenseVector( tuple.productIterator.map( \
anyToDouble(_) ).toArray )\\n          case 5 => DenseVector( \
tuple.productIterator.map( anyToComplex(_) ).toArray )\\n        }\\n      } \
else {\\n        throw new IllegalArgumentException( \\\"Cannot interpret \
tuples as DenseVector when they contain values with classes other than \
Int/Long/Float/Double/Complex\\\" )\\n      }\\n    }\\n  }\\n  case class \
EnrichedTuple12( tuple: Tuple12[Any, Any, Any, Any, Any, Any, Any, Any, Any, \
Any, Any, Any] ) extends EnrichedTupleBase {\\n    def v() = {\\n      val \
temp = tuple.productIterator.map( valueCode(_) )\\n      if(temp.forall( _ > \
0 )){\\n        max( temp ) match {\\n          case 1 => DenseVector( \
tuple.productIterator.map( anyToInt(_) ).toArray )\\n          case 2 => \
DenseVector( tuple.productIterator.map( anyToLong(_) ).toArray )\\n          \
case 3 => DenseVector( tuple.productIterator.map( anyToFloat(_) ).toArray \
)\\n          case 4 => DenseVector( tuple.productIterator.map( \
anyToDouble(_) ).toArray )\\n          case 5 => DenseVector( \
tuple.productIterator.map( anyToComplex(_) ).toArray )\\n        }\\n      } \
else {\\n        throw new IllegalArgumentException( \\\"Cannot interpret \
tuples as DenseVector when they contain values with classes other than \
Int/Long/Float/Double/Complex\\\" )\\n      }\\n    }\\n  }\\n  case class \
EnrichedTuple13( tuple: Tuple13[Any, Any, Any, Any, Any, Any, Any, Any, Any, \
Any, Any, Any, Any] ) extends EnrichedTupleBase {\\n    def v() = {\\n      \
val temp = tuple.productIterator.map( valueCode(_) )\\n      if(temp.forall( \
_ > 0 )){\\n        max( temp ) match {\\n          case 1 => DenseVector( \
tuple.productIterator.map( anyToInt(_) ).toArray )\\n          case 2 => \
DenseVector( tuple.productIterator.map( anyToLong(_) ).toArray )\\n          \
case 3 => DenseVector( tuple.productIterator.map( anyToFloat(_) ).toArray \
)\\n          case 4 => DenseVector( tuple.productIterator.map( \
anyToDouble(_) ).toArray )\\n          case 5 => DenseVector( \
tuple.productIterator.map( anyToComplex(_) ).toArray )\\n        }\\n      } \
else {\\n        throw new IllegalArgumentException( \\\"Cannot interpret \
tuples as DenseVector when they contain values with classes other than \
Int/Long/Float/Double/Complex\\\" )\\n      }\\n    }\\n  }\\n  case class \
EnrichedTuple14( tuple: Tuple14[Any, Any, Any, Any, Any, Any, Any, Any, Any, \
Any, Any, Any, Any, Any] ) extends EnrichedTupleBase {\\n    def v() = {\\n   \
   val temp = tuple.productIterator.map( valueCode(_) )\\n      \
if(temp.forall( _ > 0 )){\\n        max( temp ) match {\\n          case 1 => \
DenseVector( tuple.productIterator.map( anyToInt(_) ).toArray )\\n          \
case 2 => DenseVector( tuple.productIterator.map( anyToLong(_) ).toArray )\\n \
         case 3 => DenseVector( tuple.productIterator.map( anyToFloat(_) \
).toArray )\\n          case 4 => DenseVector( tuple.productIterator.map( \
anyToDouble(_) ).toArray )\\n          case 5 => DenseVector( \
tuple.productIterator.map( anyToComplex(_) ).toArray )\\n        }\\n      } \
else {\\n        throw new IllegalArgumentException( \\\"Cannot interpret \
tuples as DenseVector when they contain values with classes other than \
Int/Long/Float/Double/Complex\\\" )\\n      }\\n    }\\n  }\\n  case class \
EnrichedTuple15( tuple: Tuple15[Any, Any, Any, Any, Any, Any, Any, Any, Any, \
Any, Any, Any, Any, Any, Any] ) extends EnrichedTupleBase {\\n    def v() = {\
\\n      val temp = tuple.productIterator.map( valueCode(_) )\\n      \
if(temp.forall( _ > 0 )){\\n        max( temp ) match {\\n          case 1 => \
DenseVector( tuple.productIterator.map( anyToInt(_) ).toArray )\\n          \
case 2 => DenseVector( tuple.productIterator.map( anyToLong(_) ).toArray )\\n \
         case 3 => DenseVector( tuple.productIterator.map( anyToFloat(_) \
).toArray )\\n          case 4 => DenseVector( tuple.productIterator.map( \
anyToDouble(_) ).toArray )\\n          case 5 => DenseVector( \
tuple.productIterator.map( anyToComplex(_) ).toArray )\\n        }\\n      } \
else {\\n        throw new IllegalArgumentException( \\\"Cannot interpret \
tuples as DenseVector when they contain values with classes other than \
Int/Long/Float/Double/Complex\\\" )\\n      }\\n    }\\n  }\\n  case class \
EnrichedTuple16( tuple: Tuple16[Any, Any, Any, Any, Any, Any, Any, Any, Any, \
Any, Any, Any, Any, Any, Any, Any] ) extends EnrichedTupleBase {\\n    def \
v() = {\\n      val temp = tuple.productIterator.map( valueCode(_) )\\n      \
if(temp.forall( _ > 0 )){\\n        max( temp ) match {\\n          case 1 => \
DenseVector( tuple.productIterator.map( anyToInt(_) ).toArray )\\n          \
case 2 => DenseVector( tuple.productIterator.map( anyToLong(_) ).toArray )\\n \
         case 3 => DenseVector( tuple.productIterator.map( anyToFloat(_) \
).toArray )\\n          case 4 => DenseVector( tuple.productIterator.map( \
anyToDouble(_) ).toArray )\\n          case 5 => DenseVector( \
tuple.productIterator.map( anyToComplex(_) ).toArray )\\n        }\\n      } \
else {\\n        throw new IllegalArgumentException( \\\"Cannot interpret \
tuples as DenseVector when they contain values with classes other than \
Int/Long/Float/Double/Complex\\\" )\\n      }\\n    }\\n  }\\n  case class \
EnrichedTuple17( tuple: Tuple17[Any, Any, Any, Any, Any, Any, Any, Any, Any, \
Any, Any, Any, Any, Any, Any, Any, Any] ) extends EnrichedTupleBase {\\n    \
def v() = {\\n      val temp = tuple.productIterator.map( valueCode(_) )\\n   \
   if(temp.forall( _ > 0 )){\\n        max( temp ) match {\\n          case 1 \
=> DenseVector( tuple.productIterator.map( anyToInt(_) ).toArray )\\n         \
 case 2 => DenseVector( tuple.productIterator.map( anyToLong(_) ).toArray \
)\\n          case 3 => DenseVector( tuple.productIterator.map( anyToFloat(_) \
).toArray )\\n          case 4 => DenseVector( tuple.productIterator.map( \
anyToDouble(_) ).toArray )\\n          case 5 => DenseVector( \
tuple.productIterator.map( anyToComplex(_) ).toArray )\\n        }\\n      } \
else {\\n        throw new IllegalArgumentException( \\\"Cannot interpret \
tuples as DenseVector when they contain values with classes other than \
Int/Long/Float/Double/Complex\\\" )\\n      }\\n    }\\n  }\\n  case class \
EnrichedTuple18( tuple: Tuple18[Any, Any, Any, Any, Any, Any, Any, Any, Any, \
Any, Any, Any, Any, Any, Any, Any, Any, Any] ) extends EnrichedTupleBase {\\n \
   def v() = {\\n      val temp = tuple.productIterator.map( valueCode(_) \
)\\n      if(temp.forall( _ > 0 )){\\n        max( temp ) match {\\n          \
case 1 => DenseVector( tuple.productIterator.map( anyToInt(_) ).toArray )\\n  \
        case 2 => DenseVector( tuple.productIterator.map( anyToLong(_) \
).toArray )\\n          case 3 => DenseVector( tuple.productIterator.map( \
anyToFloat(_) ).toArray )\\n          case 4 => DenseVector( \
tuple.productIterator.map( anyToDouble(_) ).toArray )\\n          case 5 => \
DenseVector( tuple.productIterator.map( anyToComplex(_) ).toArray )\\n        \
}\\n      } else {\\n        throw new IllegalArgumentException( \\\"Cannot \
interpret tuples as DenseVector when they contain values with classes other \
than Int/Long/Float/Double/Complex\\\" )\\n      }\\n    }\\n  }\\n  case \
class EnrichedTuple19( tuple: Tuple19[Any, Any, Any, Any, Any, Any, Any, Any, \
Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any] ) extends \
EnrichedTupleBase {\\n    def v() = {\\n      val temp = \
tuple.productIterator.map( valueCode(_) )\\n      if(temp.forall( _ > 0 \
)){\\n        max( temp ) match {\\n          case 1 => DenseVector( \
tuple.productIterator.map( anyToInt(_) ).toArray )\\n          case 2 => \
DenseVector( tuple.productIterator.map( anyToLong(_) ).toArray )\\n          \
case 3 => DenseVector( tuple.productIterator.map( anyToFloat(_) ).toArray \
)\\n          case 4 => DenseVector( tuple.productIterator.map( \
anyToDouble(_) ).toArray )\\n          case 5 => DenseVector( \
tuple.productIterator.map( anyToComplex(_) ).toArray )\\n        }\\n      } \
else {\\n        throw new IllegalArgumentException( \\\"Cannot interpret \
tuples as DenseVector when they contain values with classes other than \
Int/Long/Float/Double/Complex\\\" )\\n      }\\n    }\\n  }\\n  case class \
EnrichedTuple20( tuple: Tuple20[Any, Any, Any, Any, Any, Any, Any, Any, Any, \
Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any] ) extends \
EnrichedTupleBase {\\n    def v() = {\\n      val temp = \
tuple.productIterator.map( valueCode(_) )\\n      if(temp.forall( _ > 0 \
)){\\n        max( temp ) match {\\n          case 1 => DenseVector( \
tuple.productIterator.map( anyToInt(_) ).toArray )\\n          case 2 => \
DenseVector( tuple.productIterator.map( anyToLong(_) ).toArray )\\n          \
case 3 => DenseVector( tuple.productIterator.map( anyToFloat(_) ).toArray \
)\\n          case 4 => DenseVector( tuple.productIterator.map( \
anyToDouble(_) ).toArray )\\n          case 5 => DenseVector( \
tuple.productIterator.map( anyToComplex(_) ).toArray )\\n        }\\n      } \
else {\\n        throw new IllegalArgumentException( \\\"Cannot interpret \
tuples as DenseVector when they contain values with classes other than \
Int/Long/Float/Double/Complex\\\" )\\n      }\\n    }\\n  }\\n  case class \
EnrichedTuple21( tuple: Tuple21[Any, Any, Any, Any, Any, Any, Any, Any, Any, \
Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any] ) extends \
EnrichedTupleBase {\\n    def v() = {\\n      val temp = \
tuple.productIterator.map( valueCode(_) )\\n      if(temp.forall( _ > 0 \
)){\\n        max( temp ) match {\\n          case 1 => DenseVector( \
tuple.productIterator.map( anyToInt(_) ).toArray )\\n          case 2 => \
DenseVector( tuple.productIterator.map( anyToLong(_) ).toArray )\\n          \
case 3 => DenseVector( tuple.productIterator.map( anyToFloat(_) ).toArray \
)\\n          case 4 => DenseVector( tuple.productIterator.map( \
anyToDouble(_) ).toArray )\\n          case 5 => DenseVector( \
tuple.productIterator.map( anyToComplex(_) ).toArray )\\n        }\\n      } \
else {\\n        throw new IllegalArgumentException( \\\"Cannot interpret \
tuples as DenseVector when they contain values with classes other than \
Int/Long/Float/Double/Complex\\\" )\\n      }\\n    }\\n  }\\n  case class \
EnrichedTuple22( tuple: Tuple22[Any, Any, Any, Any, Any, Any, Any, Any, Any, \
Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any] ) extends \
EnrichedTupleBase {\\n    def v() = {\\n      val temp = \
tuple.productIterator.map( valueCode(_) )\\n      if(temp.forall( _ > 0 \
)){\\n        max( temp ) match {\\n          case 1 => DenseVector( \
tuple.productIterator.map( anyToInt(_) ).toArray )\\n          case 2 => \
DenseVector( tuple.productIterator.map( anyToLong(_) ).toArray )\\n          \
case 3 => DenseVector( tuple.productIterator.map( anyToFloat(_) ).toArray \
)\\n          case 4 => DenseVector( tuple.productIterator.map( \
anyToDouble(_) ).toArray )\\n          case 5 => DenseVector( \
tuple.productIterator.map( anyToComplex(_) ).toArray )\\n        }\\n      } \
else {\\n        throw new IllegalArgumentException( \\\"Cannot interpret \
tuples as DenseVector when they contain values with classes other than \
Int/Long/Float/Double/Complex\\\" )\\n      }\\n    }\\n  }\\n\"\>"], "Output",
 CellChangeTimes->{3.6034517571738205`*^9, 3.6034517906307344`*^9, 
  3.603451888432328*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Export", "[", 
  RowBox[{"\"\<temp2.txt\>\"", ",", " ", "temp2"}], "]"}]], "Input",
 CellChangeTimes->{{3.603451893415613*^9, 3.6034519015320773`*^9}}],

Cell[BoxData["\<\"temp2.txt\"\>"], "Output",
 CellChangeTimes->{3.6034519019961042`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Directory", "[", "]"}]], "Input",
 CellChangeTimes->{{3.603451903921214*^9, 3.603451905587309*^9}}],

Cell[BoxData["\<\"C:\\\\Users\\\\Kenta\\\\Documents\"\>"], "Output",
 CellChangeTimes->{3.603451905761319*^9}]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1920, 1181},
WindowMargins->{{-4, Automatic}, {Automatic, 1107}},
FrontEndVersion->"9.0 for Microsoft Windows (64-bit) (January 25, 2013)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[557, 20, 732, 20, 92, "Input"],
Cell[CellGroupData[{
Cell[1314, 44, 164, 3, 31, "Input"],
Cell[1481, 49, 121, 1, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1639, 55, 165, 3, 31, "Input"],
Cell[1807, 60, 82, 1, 31, "Output"]
}, Open  ]],
Cell[1904, 64, 780, 14, 52, "Input"],
Cell[CellGroupData[{
Cell[2709, 82, 435, 9, 31, "Input"],
Cell[3147, 93, 4948, 75, 632, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[8132, 173, 103, 1, 79, "Section"],
Cell[8238, 176, 645, 12, 31, "Input"],
Cell[CellGroupData[{
Cell[8908, 192, 321, 8, 31, "Input"],
Cell[9232, 202, 1976, 26, 504, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[11257, 234, 114, 1, 49, "Section"],
Cell[11374, 237, 1411, 21, 352, "Input"],
Cell[CellGroupData[{
Cell[12810, 262, 355, 9, 31, "Input"],
Cell[13168, 273, 21463, 289, 7072, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[34668, 567, 175, 3, 31, "Input"],
Cell[34846, 572, 88, 1, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[34971, 578, 123, 2, 31, "Input"],
Cell[35097, 582, 110, 1, 31, "Output"]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
